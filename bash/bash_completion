# 可将编写好的脚本在用户根目录.bash_profile中进行调用，亦可放于/etc/bash_completion.d/下，这样在下次登录终端时即可自动source自动补全脚本。
# complete -F _complete_func git
complete -F _complete_func git.sh
complete -F _complete_func python.sh
complete -F _complete_func mvn.sh
complete -F _complete_func download.sh
complete -F _complete_func mvn
complete -F _complete_func vimspector.sh
complete -F _complete_func you-get # 爬取视频工具,使用 `pip3 install you-get` 安装
_complete_func() {

    # COMP_WORDS: 类型为数组，存放当前命令行中输入的所有单词
    # COMP_CWORD: 型为整数，当前输入的单词在COMP_WORDS中的索引
    # COMPREPLY: 类型为数组，候选的补全结果
    # COMP_WORDBREAKS: 类型为字符串，表示单词之间的分隔符
    # COMP_LINE: 类型为字符串，表示当前的命令行输入字符
    # COMP_POINT: 类型为整数，表示光标在当前命令行的哪个位置

    local original_cmd=${COMP_WORDS[0]}

    # cmd_list 编写规则:
    # 格式如下 : cmd_list=("$cmd_item $cmd_item {key} '{key}' [cmd] '[cmd]'  ...")
    # 1. cmd_list中的每个元素为提示的完整命令行
    # 2. cmd_item支持{key}形式 : 输出{key},并且不比较与原始的shell命令
    # 3. cmd_item支持[cmd]形式 : 输出执行的cmd结果,并且不比较与原始的shell命令
    # 4. 如果cmd_item带空格可以用''(单引号)包裹
    local cmd_list=()
    if [[ "$original_cmd" == "python.sh" ]]; then
        cmd_list=("python.sh --help" # 查看帮助文档 
            "python.sh setuptools env" # 安装构建/打包的相关依赖
            "python.sh setuptools init {项目名}" # 初始化一个可打包python项目
            "python.sh setuptools install" # 将本地python项目安装到site-packages
            "python.sh setuptools build" # 打包本地python项目,在./dist 生成文件夹
        )
    elif [[ "$original_cmd" == "git" ]]; then
        cmd_list=("git --help" # 查看帮助文档

            # git stash : 将目前还不想提交的但是已经修改的内容进行暂存至堆栈
            "git stash push -m {提交消息用双引号包裹}" # 将修改内容暂存至stash暂存区(为一个栈), 并且使用消息
            "git stash list" # 查看当前stash暂存区中的内容
            "git stash pop" # 将当前stash中的内容弹出，并应用到当前分支对应的工作目录上, 命令将堆栈中最近保存的内容删除（栈是先进后出）
            "git stash pop {stash暂存栈下标}" # 将指定stash栈的内容弹出，并应用到当前分支对应的工作目录上, 比如git stash pop stash@{1}
            "git stash apply" # 将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除
            "git stash drop {stash暂存栈下标}" # 从stash堆栈中移除某个指定的stash, 比如 git stash drop stash@{0}
            "git stash clear" # 清除stash堆栈中的所有内容
            "git stash show" # 查看堆栈中最新保存的stash和当前目录的差异。
            "git stash show {stash暂存栈下标} -p" # 查看堆栈中指定保存的stash和当前目录的差异。比如  git stash show stash@{1} -p 
            "git stash create" # 它创建了一个暂存条目，并返回它的对象名，而不将其推送到暂存参考日志中返回值配合 git stash store -m "消息" ${git stash create}
            "git stash store -m {消息} {gitStashCreate执行结果}" # 创建的暂存条目推送到暂存参考日志
            "git stash branch {分支名} {stash暂存栈下标}" # 此命令使用指定的stash创建一个新分支，然后删除指定的存储, git stash branch new_branch stash@{1}
            )
        
    elif [[ "$original_cmd" == "git.sh" ]]; then
        cmd_list=("git.sh --help" # 查看帮助文档
            "git.sh upstream {上游git地址}" # Git进行fork后跟原仓库同步,会添加一个上游的主干分支 upstream/master
            "git.sh github repos {github组织} {pageSize:30}" # git clone github上一个组织(organizations)下的所有存储库
            "git.sh github upstreamUrl" # 解析github项目上游url
            "git.sh reset version {git_commit_id}" # git回滚到某个版本
            "git.sh reset add {file_path_list}" # git撤销add 文件
            "git.sh init_server {项目名}" # 初始化git服务端项目,供git clone user@ip:/项目路径
            "git.sh pull" # 将当前目录下的所有git项目pull
        )
    elif [[ "$original_cmd" == "mvn.sh" ]]; then
        cmd_list=("mvn.sh --help" # 查看mvn.sh脚本帮助文档
            "mvn.sh find_main {过滤字符1} {过滤字符2}" # 扫描本目录下所有的main java
            "mvn.sh deploy '[mvn.sh find_main src/main]'" # 部署maven项目,运行前强制打包编译
            "mvn.sh run '[mvn.sh find_main src/main]'" # 运行maven项目,只是编译不打包,开启远程debug,远程端口5005,不阻塞启动
            "mvn.sh debug '[mvn.sh find_main src/main]'" # 运行maven项目,只是编译不打包,开启远程debug,远程端口5005,阻塞启动
            "mvn.sh init jar" # 初始化普通maven项目, 打包为jar
        )
    elif [[ "$original_cmd" == "download.sh" ]]; then
        cmd_list=("download.sh --help" # 脚本帮助文档
            "download.sh {url文件存储路径} {下载目录}" # 下载多个文件到某个目录
        )
    elif [[ "$original_cmd" == "mvn" ]]; then
        cmd_list=("mvn clean install -Dmaven.test.skip=true" # 编译打包maven项目,跳过测试类(不执行测试用例，也不编译测试用例类),不执行测试用例，也不编译测试用例类
            "mvn dependency:sources -DdownloadJavadocs=true" # 下载maven依赖pom的源码和doc
            "mvn dependency:tree" # 查看pom依赖树
            "mvn compile" # 编译maven项目
            "mvn compiler:compile" # 编译maven项目
        )
    elif [[ "$original_cmd" == "vimspector.sh" ]]; then
        cmd_list=("vimspector.sh --help" # 查看帮助文档
            "vimspector.sh language" # 查看支持的语言
            "vimspector.sh config '[vimspector.sh language]'" # 复制对应语言的配置到本目录下,在本地生成 .vimspector.json 文件
        )
    elif [[ "$original_cmd" == "you-get" ]]; then
        cmd_list=("you-get -l {视频网址}" # 下载视频列表(下载多个)
            "you-get {视频网址}" # 下载单个视频
            )
    fi

    COMPREPLY=()
    local command_name="${COMP_WORDS[COMP_CWORD]}"

    # key: 在cmd_item , value: 提示值
    declare -A local completion_map=()

    local i
    for(( i=0; i<${#cmd_list[@]}; i++)) do
        local cmd=${cmd_list[i]}
        eval local cmd_item_list=($cmd)
        local cmd_item_list_length=${#cmd_item_list[@]}

        if (( "$cmd_item_list_length" <= "$COMP_CWORD" )); then
            continue
        fi

        # 匹配的次数/要提示的位置
        local match_num=0
        local index=0
        for(( index=0; index<$COMP_CWORD; index++)) do
            local cmd_item=${cmd_item_list[index]}
            local original_cmd_item=${COMP_WORDS[index]}
            
            if [[ $cmd_item == "$original_cmd_item" ]]; then
                (( match_num=match_num+1 ))
            # 支持{key}形式,{key} : 为任意支持只是作为提示
            elif grep -E '^\{.*\}$' <<< "$cmd_item" > /dev/null; then
                (( match_num=match_num+1 ))
            # 支持[cmd]形式 : 为任意支持,但提示内容通过cmd执行,cmd使用'@'替换空格防止二维数组遍历失败
            elif grep -E '^\[.*\]$' <<< "$cmd_item" > /dev/null; then
                (( match_num=match_num+1 ))
            else
                break
            fi
        done

        if (( match_num == COMP_CWORD )); then
            local completion_cmd=${cmd_item_list[match_num]}
            if grep -E '^\[.*\]$' <<< "$completion_cmd" > /dev/null; then
                local run_completion_cmd=${completion_cmd%]*}
                run_completion_cmd=${run_completion_cmd#*[}
                completion_map[$completion_cmd]=$(eval $run_completion_cmd)
            else
                completion_map[$completion_cmd]=$completion_cmd
            fi

        fi
    done

    local completion_txt=""
    local value
    for value in ${completion_map[@]}; do
        completion_txt="$completion_txt $value"
    done

    # 输出tab提示
    COMPREPLY=($(compgen -W "${completion_txt}" -- ${command_name}))
    return 0
}
