alias transz="trans en:zh"
alias transe="trans zh:en"

alias mvndebug='export MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspen=n"'

# 需要pip3 install pyotp
alias 2fa_git='python -c "import pyotp; print(pyotp.TOTP(\"3NQ2ZK7MF2GQP4LE\").now())"'


# 对于环境变量只能影响到当前用户, 所以使用 sudo 的时候代理失效所以需要
# 编辑 sudoers 文件：可以配置 sudo 允许某些环境变量被传递。这需要使用 visudo 命令进行编辑。
# 具体步骤如下
# ```shell
# # 1. 打开sudoers
# $ sudo visudo
# # 2. 添加如下行告诉 sudo 保留 proxy 相关的环境变量
# Defaults    env_keep += "http_proxy"
# Defaults    env_keep += "https_proxy"
# Defaults    env_keep += "socks5_proxy"
# ```
proxy () {
    export http_proxy="http://localhost:20181"
    export https_proxy=$http_proxy
    export socks5_proxy="socks5://localhost:20180"
    echo "HTTP Proxy on"
}

# noproxy
noproxy () {
    unset http_proxy
    unset https_proxy
    unset socks5_proxy
    echo "HTTP Proxy off"
}


# 在 Bash shell 中，PS4 是一个环境变量，用来定义在开启 shell 脚本调试模式 (set -x) 时显示的提示符
# ${FUNCNAME[0]} : 打印当前正在执行的方法, 但有些linux系统不存在该参数需要特殊处理
# 打印方法名, 如果方法名存在的话
# export PS4='\033[0;33m+ $(date +"%F %T.%3N") $BASH_SOURCE:$LINENO:$( [ -z ${FUNCNAME} ] || echo "${FUNCNAME}():" ) \033[0m '
# export PS4='\033[0;33m+ $(date +"%F %T.%3N") $BASH_SOURCE:$LINENO:${FUNCNAME} \033[0m '
# 不打印方法名
export PS4='\033[0;33m+ $(date +"%F %T.%3N") $BASH_SOURCE:$LINENO: \033[0m '

# 兼容部分应用在 ssh -X 情况下无法打开图形界面问题(比如firefox)
# 若Firefox或Chromium通过Snap方式安装，其运行环境存在隔离机制，
# 导致默认的XAUTHORITY变量路径被修改：
export XAUTHORITY=$HOME/.Xauthority

# 通过update-alternatives切换jdk版本 
# sudo update-alternatives --install /opt/jdk java /opt/jdk8  1000
# sudo update-alternatives --install /opt/jdk java /opt/jdk11 110
# sudo update-alternatives --install /opt/jdk java /opt/jdk17 170
# sudo update-alternatives --install /opt/jdk java /opt/jdk23 230
# 可以通过sudo update-alternatives --set java <path> 更改jdk版本
# 也可以通过 sudo update-alternatives --config java 更高jdk版本
# 可以通过 sudo update-alternatives --auto java 更改会jdk8(<priority>最高的那个)
export JAVA_HOME=/opt/jdk
export CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar
export MAVEN_HOME=/opt/apache-maven-3.9.6
export BASH_HOME=~/.local/bin

# 指定c语言额外的include,lib路径
# LD_LIBRARY_PATH 用于指定动态链接库的搜索路径。
# 当您运行一个依赖于动态库的程序时，操作系统需要找到这些库以加载它们。这个环境变量可以临时改变库的搜索路径。
export LD_LIBRARY_PATH="${HOME}/.local/lib:$LD_LIBRARY_PATH"
# CPPFLAGS 用于指定 C 或 C++ 预处理器的标志。在编译源代码时，预处理器会在编译之前处理所有以 #include 开头的指令和宏定义。
# 通过这个环境变量，您可以设置额外的编译器选项和包含路径。
export CPPFLAGS="-I${HOME}/.local/include"
# LDFLAGS 用于指定链接器的标志。在编译 C/C++ 程序时，编译器会使用链接器将目标文件和库结合起来生成可执行文件。
# LDFLAGS 环境变量可以用于指定额外的链接器选项和库路径。
export LDFLAGS="-L${HOME}/.local/lib"
# alias gcc="gcc -I gcc -I ~/.local/include"

PATH=.:${BASH_HOME}:${JAVA_HOME}/bin:${JAVA_HOME}/jre/bin:${MAVEN_HOME}/bin:${PATH}

LANG=zh_CN.UTF-8
# 光标不闪烁
printf '\e[?12l'

######################################################################
############################### 自定义 ###############################
######################################################################
