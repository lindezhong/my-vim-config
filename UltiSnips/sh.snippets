# #变量
# ##数组#变量
# #	个数相关,$#：shell的参数个数
# @、*	所有元素,$@ $: shell的所有参数列表 array[@]/array[]: 数组的所有元素
# ${#array[@]}	取数组元素的个数
# ${#array[*]}	取数组元素的个数
# ${array[*]}	取所有数组的元素
# ${array[@]}	取所有数组的元素
# ${!array[@]}	取数组下标的值
# ${array[@]:n:m}	从数组n位置开始取m个元素
# array_new=(${array1[@]} ${array2[@]})	数组合并:将array1和array2合并然后赋值给array_new
# array=($(echo ${ayyary[@]} | sed ‘s/ /\n/g’ |sort )) | uniq	对数组进行去重排序，详细解释
# if echo “${array[@]}” | grep -w “item_1” &>/dev/null; then
# echo "Found"
# fi	判断item_1是否在array中

snippet arrLength "获取数组长度" w
${2:length}=\$\{#${1:数组名}[@]\}
endsnippet

snippet arrIn "判断元素是否在数组中"
if [[ "\$\{${1:arr}[@]\}" =~ "\$\{${2:item}\}" ]]; then
    $0
fi
endsnippet

# #!/bin/bash
# fun() {
#     local __tmp_arr_var=$(declare -p "$1")
#     eval "declare -A local arr_var"=${__tmp_arr_var#*=}
#     for arr_item in "${arr_var[@]}"; do
#         echo -n "$arr_item "
#     done
# }
# arr=('1' 2 3)
# fun arr
# 输出: 3 2 1
snippet arrArgs "数组作为函数/方法的参数,调用例子(fun为函数arr_var为map变量,调用时不带$). fun arr_var"
local __tmp_arr_var=\$(declare -p "\$${1:index}")
eval "declare -A local ${2:arr_var}"=${__tmp_arr_var#*=}
$0
endsnippet


# ##map#变量
# #	个数相关,$#：shell的参数个数
# @、*	所有元素,$@ $: shell的所有参数列表 array[@]/array[]: 数组的所有元素
# ${#array[@]}	取数组元素的个数
# ${#array[*]}	取数组元素的个数
# ${array[*]}	取所有数组的元素
# ${array[@]}	取所有数组的元素
# ${!array[@]}	取数组下标的值
# ${array[@]:n:m}	从数组n位置开始取m个元素
# array_new=(${array1[@]} ${array2[@]})	数组合并:将array1和array2合并然后赋值给array_new
# array=($(echo ${ayyary[@]} | sed ‘s/ /\n/g’ |sort )) | uniq	对数组进行去重排序，详细解释
# if echo “${array[@]}” | grep -w “item_1” &>/dev/null; then
# echo "Found"
# fi	判断item_1是否在array中

snippet mapLength "获取map长度" w
${2:length}=\$\{#${1:map名}[@]\}
endsnippet

snippet mapInKey "判断map中是否包含某个key"
if [ -n "\$\{${1:map}[${2:key}]\}" ]; then
    $0
fi
endsnippet
snippet mapInValue "判断map中是否包含某个Value"
if [[ "\$\{${1:map}[@]\}" =~ "\$\{${2:value}\}" ]]; then
    $0
fi
endsnippet

snippet mapInit "初始化map,普通方式定义无法遍历:declare -A map=(['k1']='v1' ['k2']='v2')"
declare -A ${1:map_name}=(${2:初始化值})
$0
endsnippet
snippet mapFor "遍历map"
for ${2:key} in \$\{!${1:map_var_name}[@]\}; do
    ${3:value}=\$\{$1[\$$2]\}
    $0
done
endsnippet
snippet mapForKeys "遍历map keys"
for ${2:key} in \$\{!${1:map_var_name}[@]\}; do
    $0
done
endsnippet
snippet mapForValues "遍历map values"
for ${2:value} in \$\{${1:map_var_name}[@]\}; do
    $0
done
endsnippet

# #!/bin/bash
# fun() {
#     local __tmp_map_var=$(declare -p "$1")
#     eval "declare -A local map_var"=${__tmp_map_var#*=}
#     for key in ${!map_var[@]}; do
#         value=${map_var[$key]}
#         echo "$key : $value"
#     done
# }
# declare -A map=(["k"]="v")
# fun map
# 输出 : k : v
snippet mapArgs "map作为函数/方法的参数,调用例子(fun为函数map_var为map变量,调用时不带$). fun map_var"
local __tmp_map_var=\$(declare -p "\$${1:index}")
eval "declare -A local ${2:map_var}"=${__tmp_map_var#*=}
$0
endsnippet

# ##字符串 str#变量
snippet strEquals "比较两个字符串相等" i
if [[ "${1:变量或字面量支持通配符*}" == "${2:变量或字面量支持通配符*}" ]]; then
    $0
fi
endsnippet

snippet strInit "初始化变量"
test -z "\$${1:变量名}" && $1="${2:初始值}"
endsnippet

snippet strNull "判断字符串为空"
if [[ -z \$${1:变量名} ]]; then
    $0
fi
endsnippet

snippet strReplaceOne "替换字符串可以用通配符(*),只替换第一个匹配的字符串"
${4:var}=\$\{${1:var}/${2:被替换字符}/${3:替换字符}\}
$0
endsnippet
snippet strReplaceAll "替换字符串可以用通配符(*),替换第全部匹配的字符串"
${4:var}=\$\{${1:var}//${2:被替换字符}/${3:替换字符}\}
$0
endsnippet
snippet strReplaceSed "替换字符串,使用正则表达式, 最后'/g' 为全部匹配,如果为 '/'则只替换匹配的第一个"
${4:var}=\$(echo \$${1:var} | sed 's/${2:被替换字符}/${3:替换字符}/g')
$0
endsnippet

# #!/bin/bash
# str="1xxxx2,3 4"
# OLD_IFS=${IFS}
# IFS="xxxx"
# arr=($str)
# IFS=${OLD_IFS}
# for(( i=0; i<${#arr[@]}; i++)) do
#     item=${arr[i]}
#     echo "$item"
# done
# echo "arr数组长度: ${#arr[@]}"
# 输出:
# 1
# 
# 
# 
# 2,3 4
# arr数组长度: 5
snippet strSplit "分割字符串(将分割字符串换成IFS),但要注意字符串中有IFS的情况。 '1,2 3' -> ['1','2','3']"
${3:str_arr_var}=(\$\{${1:str_var}//${2:分割符}/\$\{IFS\}\})
$0
endsnippet
snippet strSplitIfs "分割字符串(通过修改IFS实现),要注意1.分割符只能有一位2.要使用带下标的for循环(否则原来字符串中带IFS会分割)  。'1,2 3' -> ['1','2 3']"
OLD_IFS=\$\{IFS\}
IFS='${1:分割符}'
${3:str_arr_var}=(\$${2:str_var})
IFS=\$\{OLD_IFS\}
$0
endsnippet

# ###字符串截取##字符串 str#变量
# ${string: start :length}   从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。
# ${string: start}           从 string 字符串的左边第 start 个字符开始截取，直到最后。
# ${string: 0-start :length} 从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。
# ${string: 0-start}         从 string 字符串的右边第 start 个字符开始截取，直到最后。
# ${string#*chars}           从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。
# ${string##*chars}          从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。
# ${string%*chars}           从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。
# ${string%%*chars}          从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。
snippet strSubByIndex "截取字符串根据下标,${'c.biancheng.net': 2 : 9} -> 'biancheng'"
${4:var}=\$\{${1:字符串}: ${2:start启始位置,可以为负数} :${3:length长度,不填写则到最后,为负数则到倒数位置}\}
endsnippet
# 使用 # 号截取右边字符
snippet strSubRightFirst "截取关键字(第一个匹配到的)右边的字符串, ${'c.biancheng.net'#*.} -> 'biancheng.net'"
${3:var}=\$\{${1:字符串}#*${2:关键字}\}
endsnippet
snippet strSubRightLast "截取关键字(最后一个匹配到的)右边的字符串, ${'c.biancheng.net'##*.} -> 'net'"
${3:var}=\$\{${1:字符串}##*${2:关键字}\}
endsnippet
# 使用 % 号截取左边字符
snippet strSubLeftFirst "截取关键字(第一个匹配到的)左边的字符串, ${'c.biancheng.net'%*.} -> 'c'"
${3:var}=\$\{${1:字符串}%%${2:关键字}*\}
endsnippet
snippet strSubLeftLast "截取关键字(最后一个匹配到的)左边的字符串, ${'c.biancheng.net'%%*.} -> 'c.biancheng'"
${3:var}=\$\{${1:字符串}%${2:关键字}*\}
endsnippet


# ##函数参数args#变量
# $# 	传递到脚本的参数个数
# $* 	以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
# $$ 	脚本运行的当前进程ID号
# $! 	后台运行的最后一个进程的ID号
# $@ 	与$*相同，但是使用时加引号，并在引号中返回每个参数。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
# $- 	显示Shell使用的当前选项，与set命令功能相同。
# $? 	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
# #!/bin/bash
# echo "-- \$* 演示 ---"
# for i in "$*"; do
#     echo $i
# done
# echo "-- \$@ 演示 ---"
# for i in "$@"; do
#     echo $i
# done
# 执行`test.sh 1 2 3`输出如下:
# -- $* 演示 ---
# 1 2 3
# -- $@ 演示 ---
# 1
# 2
# 3
snippet argsFor "遍历参数(外部传入参数)"
for ${1:item} in "$@"; do
    $0
done
endsnippet
# #!/bin/bash
# fun() {
#     local __tmp_map_var=$(declare -p "$1")
#     eval "declare -A local map_var"=${__tmp_map_var#*=}
#     for key in ${!map_var[@]}; do
#         value=${map_var[$key]}
#         echo "$key : $value"
#     done
# }
# declare -A map=(["k"]="v")
# fun map
# 输出 : k : v
snippet argsMap "map作为函数/方法的参数,调用例子(fun为函数map_var为map变量,调用时不带$). fun map_var"
local __tmp_map_var=\$(declare -p "\$${1:index}")
eval "declare -A local ${2:map_var}"=${__tmp_map_var#*=}
$0
endsnippet
# #!/bin/bash
# fun() {
#     local __tmp_arr_var=$(declare -p "$1")
#     eval "declare -A local arr_var"=${__tmp_arr_var#*=}
#     for arr_item in "${arr_var[@]}"; do
#         echo -n "$arr_item "
#     done
# }
# arr=('1' 2 3)
# fun arr
# 输出: 3 2 1
snippet argsArr "数组作为函数/方法的参数,调用例子(fun为函数arr_var为map变量,调用时不带$). fun arr_var"
local __tmp_arr_var=\$(declare -p "\$${1:index}")
eval "declare -A local ${2:arr_var}"=${__tmp_arr_var#*=}
$0
endsnippet

# ##变量 var#变量
snippet varInit "初始化变量"
test -z "\$${1:变量名}" && $1="${2:初始值}"
endsnippet

snippet varNull "判断字符串为空"
if [[ -z \$${1:变量名} ]]; then
    $0
fi
endsnippet


# 流程控制 if for err

# ##if#流程控制
# 常用参数：
# 文件/目录判断：
# [ -a FILE ] 如果 FILE 存在则为真。
# [ -b FILE ] 如果 FILE 存在且是一个块文件则返回为真。
# [ -c FILE ] 如果 FILE 存在且是一个字符文件则返回为真。
# [ -d FILE ] 如果 FILE 存在且是一个目录则返回为真。
# [ -e FILE ] 如果 指定的文件或目录存在时返回为真。
# [ -f FILE ] 如果 FILE 存在且是一个普通文件则返回为真。
# [ -g FILE ] 如果 FILE 存在且设置了SGID则返回为真。
# [ -h FILE ] 如果 FILE 存在且是一个符号符号链接文件则返回为真。（该选项在一些老系统上无效）
# [ -k FILE ] 如果 FILE 存在且已经设置了冒险位则返回为真。
# [ -p FILE ] 如果 FILE 存并且是命令管道时返回为真。
# [ -r FILE ] 如果 FILE 存在且是可读的则返回为真。
# [ -s FILE ] 如果 FILE 存在且大小非0时为真则返回为真。
# [ -u FILE ] 如果 FILE 存在且设置了SUID位时返回为真。
# [ -w FILE ] 如果 FILE 存在且是可写的则返回为真。（一个目录为了它的内容被访问必然是可执行的）
# [ -x FILE ] 如果 FILE 存在且是可执行的则返回为真。
# [ -O FILE ] 如果 FILE 存在且属有效用户ID则返回为真。
# [ -G FILE ] 如果 FILE 存在且默认组为当前组则返回为真。（只检查系统默认组）
# [ -L FILE ] 如果 FILE 存在且是一个符号连接则返回为真。
# [ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则返回为真。
# [ -S FILE ] 如果 FILE 存在且是一个套接字则返回为真。
# [ FILE1 -nt FILE2 ] 如果 FILE1 比 FILE2 新, 或者 FILE1 存在但是 FILE2 不存在则返回为真。
# [ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 老, 或者 FILE2 存在但是 FILE1 不存在则返回为真。
# [ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则返回为真。
# 字符串判断
# [ -z STRING ]    如果STRING的长度为零则返回为真，即空是真
# [ -n STRING ]    如果STRING的长度非零则返回为真，即非空是真
# [ STRING1 ]　   如果字符串不为空则返回为真,与-n类似
# [ STRING1 == STRING2 ]   如果两个字符串相同则返回为真
# [ STRING1 != STRING2 ]    如果字符串不相同则返回为真
# [ STRING1 < STRING2 ]     如果 “STRING1”字典排序在“STRING2”前面则返回为真。
# [ STRING1 > STRING2 ]     如果 “STRING1”字典排序在“STRING2”后面则返回为真。
# 数值判断
# [ INT1 -eq INT2 ]          INT1和INT2两数相等返回为真 ,=
# [ INT1 -ne INT2 ]          INT1和INT2两数不等返回为真 ,<>
# [ INT1 -gt INT2 ]           INT1大于INT2返回为真 ,>
# [ INT1 -ge INT2 ]          INT1大于等于INT2返回为真,>=
# [ INT1 -lt INT2 ]            INT1小于INT2返回为真 ,<
# [ INT1 -le INT2 ]           INT1小于等于INT2返回为真,<=
# 逻辑判断
# [ ! EXPR ]       逻辑非，如果 EXPR 是false则返回为真。
# [ EXPR1 -a EXPR2 ]      逻辑与，如果 EXPR1 and EXPR2 全真则返回为真。
# [ EXPR1 -o EXPR2 ]      逻辑或，如果 EXPR1 或者 EXPR2 为真则返回为真。
# [  ] || [  ]           用OR来合并两个条件
# [  ] && [  ]        用AND来合并两个条件
# 其他判断
# [ -t FD ]  如果文件描述符 FD （默认值为1）打开且指向一个终端则返回为真
# [ -o optionname ]  如果shell选项optionname开启则返回为真
# IF高级特性：
# 双圆括号((  ))：表示数学表达式
#     在判断命令中只允许在比较中进行简单的算术操作，而双圆括号提供更多的数学符号，而且在双圆括号里面的'>','<'号不需要转意。
# 双方括号[[  ]]：表示高级字符串处理函数
#     双方括号中判断命令使用标准的字符串比较，还可以使用匹配模式，从而定义与字符串相匹配的正则表达式。
# 双括号的作用：
# 在shell中，[ $a != 1 || $b = 2 ]是不允许出，要用[ $a != 1 ] || [ $b = 2 ]，而双括号就可以解决这个问题的，[[ $a != 1 || $b = 2 ]]。又比如这个[ "$a" -lt "$b" ]，也可以改成双括号的形式(("$a" < "$b"))

snippet ifStrEquals "比较两个字符串相等" i
if [[ "${1:变量或字面量支持通配符*}" == "${2:变量或字面量支持通配符*}" ]]; then
    $0
fi
endsnippet

snippet ifStrNull "判断字符串为空"
if [[ -z \$${1:变量名} ]]; then
    $0
fi
endsnippet
snippet ifVarNull "判断字符串为空"
if [[ -z \$${1:变量名} ]]; then
    $0
fi
endsnippet

snippet ifDirExist "判断目录(目录不能用''包裹)是否存在，要判断不存在加 !"
if [ -d ${1:目录地址} ]; then
    $0
fi
endsnippet

snippet ifNum "判断是否为数字,进入if是数字"
if grep -E '^[0-9][0-9]*$' <<< "\$${1:var}" >> /dev/null; then
    $0
fi
endsnippet

snippet ifArrIn "判断元素是否在数组中,进入if则在"
if [[ "\$\{${1:arr}[@]\}" =~ "\$\{${2:item}\}" ]]; then
    $0
fi
endsnippet
snippet ifInArr "判断元素是否在数组中,进入if则在"
if [[ "\$\{${1:arr}[@]\}" =~ "\$\{${2:item}\}" ]]; then
    $0
fi
endsnippet
snippet ifInMapKey "判断map中是否包含某个key"
if [ -n "\$\{${1:map}[${2:key}]\}" ]; then
    $0
fi
endsnippet
snippet ifInMapValue "判断map中是否包含某个Value"
if [[ "\$\{${1:map}[@]\}" =~ "\$\{${2:value}\}" ]]; then
    $0
fi
endsnippet



# ##for#流程控制
snippet forArgs "遍历参数(外部传入参数)"
for ${1:item} in "$@"; do
    $0
done
endsnippet

snippet forin "遍历数组不带下标"
for ${1:子变量名} in "\$\{${2:父变量名}[@]\}"; do
    $0
done
endsnippet

snippet fori "遍历数组带下标"
for(( ${1:i}=0; $1<\$\{#${2:数组名}[@]\}; $1++)) do
    $0\$\{$2[$1]\}
done
endsnippet

snippet forStr "遍历字符串,遍历元素是char, 'hello' -> ['h','e','l','l','o']"
for (( ${2:i}=0; $2<=\$\{#${1:str}\}; $2++ )); do
    ${3:char}=\$\{$1:\$$2:1\}
	$0
done
endsnippet
	
snippet forMap "遍历map"
for ${2:key} in \$\{!${1:map_var_name}[@]\}; do
    ${3:value}=\$\{$1[\$$2]\}
    $0
done
endsnippet
snippet forMapKeys "遍历map keys"
for ${2:key} in \$\{!${1:map_var_name}[@]\}; do
    $0
done
endsnippet
snippet forMapValues "遍历map values"
for ${2:value} in \$\{${1:map_var_name}[@]\}; do
    $0
done
endsnippet

snippet forArr2In "遍历二维数组不带下标，arr2=('1 2 3' '4 5 6'),如果子数组带空格用(')包裹"
for ${2:arr_1_var} in "\$\{${1:arr}[@]\}"; do
    eval ${3:arr_2_var}=(\$$2) 
    for ${4:item} in "\$\{$3[@]\}"; do
        $0
	done
done
endsnippet
snippet forArr2I "遍历二维数组带下标,arr2=('1 2 3' '4 5 6'),如果子数组带空格用(')包裹"
for(( ${1:i}=0; $1<\$\{#${2:数组名}[@]\}; $1++)) do
    eval ${3:tmp_arr_var}=(\$\{$2[$1]\})
    for(( ${4:j}=0; $4<\$\{#$3[@]\}; $4++)) do
        $0\$\{$3[$4]\}
    done
done
endsnippet

# ##error#流程控制
snippet errExit "上一条命令异常退出脚本"
if [ ! $? -eq 0 ]; then
    exit 1
fi
endsnippet
snippet errReturn "上一条命令异常退出方法"
if [ ! $? -eq 0 ]; then
    return 1
fi
endsnippet

# #环境信息
snippet homePath "脚本存放目录,如果该文件是个软连接不会去真实脚本获取"
home_path=$(readlink -f $(dirname "\$0"))
$0
endsnippet
snippet homePathReal "脚本存放目录,如果该文件是个软连接,会获取真实脚本路径"
script_path=\$0
while [ -L $script_path ]; do
    # 如果是软连接要处理真实路径
    script_path=$(ls -al $script_path)
    script_path=${script_path##*->}
done
home_path=$(readlink -f $(dirname "$script_path"))
endsnippet

snippet currentPath "获取当前执行脚本目录"
current_path=$(pwd)
$0
endsnippet

# ##更改目录#环境信息
# ```shell
# $ pushd /dir1 # 将目录/dir1添加到目录栈中，同时当前目录切换到/dir1
# $ pushd /dir2
# $ pushd /dir3
# $ pushd /dir4
# $ dirs -v # 显示目录栈内容,前面数字为下标
# 0 /dir1 
# 1 /dir2
# 2 /dir3
# 3 /dir4
# $ pushd +2 # 将下标为2的目录作为栈顶，顺序保持不变
# $ dirs -v
# 0 /dir3
# 1 /dir4
# 2 /dir1
# 3 /dir2
# $ popd # 将栈顶移除
# 0 /dir4
# 1 /dir1
# 2 /dir2
# ```
snippet pushd "将一个目录路径添加到／放入目录栈（历史）顶中，之后，你可以浏览位于目录栈（历史）中的任意目录(默认在栈顶)"
pushd ${1:目录}
endsnippet
snippet popd "popd命令会从栈顶移除一个目录,配合poshd使用"
popd
endsnippet
snippet dirs "dirs查看目录栈,配合pushd和popd使用"
dirs -v
endsnippet

# #输入输出
# -t : 设置超时时间单位秒,超时后不设置变量
# -p : 提示信息
# 5s后就跳过
# 例子 : read -t 5 -p "提示信息 : " var
snippet read "读取键盘输入, -t {num} 设置超时时间, 单位秒"
read -p "${1:提示信息} : " ${2:读取到那个变量}
$0
endsnippet
snippet readNum "读取键盘输入的正整数,非数值再次输入, -t {num} 设置超时时间, 单位秒 "
read -p "${1:提示信息} : " ${2:读取到那个变量}
while [ -z \`grep -E '^[0-9][0-9]*$' <<< "\$$2"\` ]; do
    read -p "${3:请输入正整数} : " $2
done
$0
endsnippet
snippet readInArrIndex "输入数组下标以选择元素, -t {num} 设置超时时间, 单位秒 "
for(( ${1:i}=0; $1<\$\{#${2:数组名}[@]\}; $1++)) do
    echo "\$$1) \$\{$2[$1]\}"
done
read -p "${3:提示信息} : " ${4:读取到那个下标变量}
while [ -z \`grep -E '^[0-9][0-9]*$' <<< "\$$4"\` ] || [ \$$4 -lt 0 ] || [ \$$4 -gt \$\{#$2[@]\} ]; do
    read -p "${6:请输入 [0 , \$\{#$2[@]\}-1] 数字} : " $4
done
${5:item}=\$\{$2[\$$4]\}
$0
endsnippet
snippet readInStr "输入字符串数组的元素,字符串数组例子 : str_arr='y Y n N',输入: y ,-t {num} 设置超时时间, 单位秒 "
read -p "${1:提示信息} , 请输入 [\$\{${3:str_arr}\}] :  " ${2:读取到那个变量}
while [[ ! "\$\{$3[@]\}" =~ "\$\{$2\}" ]] || [ -z "\$\{$2\}" ]; do
    read -p "${4:请输入 [\$$3]} : " $2
done
$0
endsnippet
snippet readNotNull "读取键盘输入不允许为空, -t {num} 设置超时时间, 单位秒"
read -p "${1:提示信息} : " ${2:读取到那个变量}
while [ -z \$$2 ]; do
    read -p "${3:不允许输入空请重新输入} : " $2
done
$0
endsnippet

# #jq
# -R : 将json 转字符串
# -r : 将字符串转json(标准化)。
#      echo '{"k": "v"}' | jq -r ".k" # 输出: v
#      echo '{"k": "v"}' | jq ".k" # 输出: "v"
# -s : 将换行符号转 '\n' 配合保证-R 使用保证json转字符串只有一行
snippet jqGet "jq获取一个字段,key由参数传递, key结构如下 : .第一层key.第二层key (使用'.'分割),key可以使用变量"
${3:var}=\$(echo \$${1:json变量} | jq -r --arg key  "${2:key}" '.[\$key]')
$0
endsnippet
snippet jqArrFor "jq遍历jq数组/list 需要 json list 为 : [] 格式"
${1:length}=$(echo \$\{${2:json list变量}\} | jq '. | length')
for (( ${3:i}=0; $3<$1; $3++ )); do
    ${4:jsonListItem}=\$(echo \$$2 | jq -r ".[\$$3]")
    $0
done
endsnippet
snippet jqPutStr "jq put string 类型到json,key/value可以使用变量 例子 : {} -> {'k': '[1,2]'}"
${1:json变量}=\$(echo -n \$\{$1\} | jq --arg key  "${2:key}"  --arg value  "${3:value}"  '.[\$key]=\$value')
$0
endsnippet
snippet jqPutJson "jq put string 类型到json,key/value可以使用变量 例子 : {} -> {'k': [1,2]}"
${1:json变量}=\$(echo -n \$\{$1\} | jq --arg key "${2:key}" --argjson value "${3:value}" '.[\$key]=\$value')
$0
endsnippet
snippet jqDel "jq 删除key,key可以使用变量 : {'k': 'v', 'k1': 'v1'} -> {'k': 'v'}"
${1:json变量}=\$(echo -n \$\{$1\} | jq --arg key "${2:key}" 'del(.[\$key])')
$0
endsnippet
snippet jqKeys "获取json的所有key"
${2:var,返回格式为json:["k"]}=\$(echo -n \$${1:json_var} | jq 'keys')
$0
endsnippet
snippet jqArrAdd "jq 往数组的index赋予值 : [1] -> [1,2],key/value/index可以使用变量, 如果追加的元素是字符串将value前的标识 --argjson -> --arg"
${1:json}=$(echo -n "\$$1" | jq --arg key "${2:key}" --argjson index "${3:index}" --argjson value "${4:value}" '.[\$key][\$index]=\$value')
$0
endsnippet
snippet jqArrAddLength "jq 往数组的最后追加元素 : [1] -> [1,2],value可以使用变量, 如果追加的元素是字符串将value前的标识 --argjson -> --arg"
${1:json}=$(echo -n "\$$1" | jq --arg key "${2:key}" --argjson value "${3:value}" '.[\$key][.[\$key] | length]=\$value')
$0
endsnippet
snippet jqArrDel "jq 删除数组中的元素(根据下标),key/index可以使用变量 : echo '[1,2]' | jq 'del(.[0])' -> [2]"
${1:json变量}=\$(echo -n \$\{$1\} | jq --arg key "${2:key}" --argjson index "${3:index}" 'del(.[\$key][\$index])')
$0
endsnippet
snippet jqArrDelLength "jq 删除数组中的元素最后一个元素,key可以使用变量 : echo '[1,2]' | jq 'del(.[length])' -> [1]"
${1:json变量}=\$(echo -n \$\{$1\} | jq --arg key "${2:key}" 'del(.[\$key][.[$key] | length - 1])')
$0
endsnippet

# #awk
snippet awk "awk 指定分割符,并且打印某个分割后的值"
awk -v FS="${1:分割符}" '{print \$${2:index以1为启始位}}'
endsnippet

# #curl
snippet curlGet "curl get"
curl -X GET '${1:url}' \
  -H 'Accept: application/json, text/plain, */*' \
  -H 'Connection: keep-alive'
endsnippet
snippet curlPost "curl post"
curl -X POST '${1:url}' \
  -H 'Accept: application/json'  \
  -H 'Content-Type: application/json'  \
  -H 'Connection: keep-alive'  \
  --data-raw '${2:json data}'
endsnippet
snippet curlUploadFile "curl上传文件"
curl '${1:url}' \
  -H 'Content-Type: multipart/form-data'  \
  -H 'Connection: keep-alive'  \
  -F 'file=@${2:filePath}' \
  -F '${3:key普通参数，value不带@}=${4:value}'
endsnippet
snippet curlHeadCookie "添加cookie"
-H "Cookie: $cookie" \
endsnippet
snippet curlHeadLanguage "curl 语言"
-H 'Accept-Language: zh-CN,zh;'  \
endsnippet

# #其他shell命令/shell
snippet continue "跳过for/while循环"
continue
endsnippet

snippet eval "eval:1.要在命令的最前面2.扫描eval后面的命令两遍第一遍替换变量，第二遍执行 arr_v='1 2',eval arr=($arr_v) => arr=(1 2)"
eval
endsnippet
