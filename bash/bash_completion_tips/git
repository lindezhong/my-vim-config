# 查看帮助文档
git --help

################################################################
# git stash : 将目前还不想提交的但是已经修改的内容进行暂存至堆栈
################################################################
# 将修改内容暂存至stash暂存区(为一个栈), 并且使用消息
git stash push -m {提交消息用双引号包裹}
# 查看当前stash暂存区中的内容
git stash list
# 将当前stash中的内容弹出，并应用到当前分支对应的工作目录上, 命令将堆栈中最近保存的内容删除（栈是先进后出）
git stash pop
# 将指定stash栈的内容弹出，并应用到当前分支对应的工作目录上, 比如git stash pop stash@{1}
git stash pop {stash暂存栈下标}
# 将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除
git stash apply
# 从stash堆栈中移除某个指定的stash, 比如 git stash drop stash@{0}
git stash drop {stash暂存栈下标}
# 清除stash堆栈中的所有内容
git stash clear
# 查看堆栈中最新保存的stash和当前目录的差异。
git stash show
# 查看堆栈中指定保存的stash和当前目录的差异。比如  git stash show stash@{1} -p
git stash show {stash暂存栈下标} -p
# 它创建了一个暂存条目，并返回它的对象名，而不将其推送到暂存参考日志中返回值配合 git stash store -m "消息" ${git stash create}
git stash create
# 创建的暂存条目推送到暂存参考日志
git stash store -m {消息} {gitStashCreate执行结果}
# 此命令使用指定的stash创建一个新分支，然后删除指定的存储, git stash branch new_branch stash@{1}
git stash branch {分支名} {stash暂存栈下标}
# 查看git有哪些tag, -l 可以过滤某些特定tag 比如  git tag -l "v1.8.5*" 只显示1.8.5 系列
git tag -l {filter}
# 创建一个轻量标签(轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。)
# git_version 可忽略, 如果不填写为当前的版本
git tag {tag_name} {git_version}
# 创建一个附注标签(附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。)
# git_version 可忽略, 如果不填写为当前的版本
git tag -a {tag_name} -m {message} {git_version}
# 通过使用 git show 命令可以看到标签信息和与之对应的提交信息
git show {tag_name}
# 默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 
# 这个过程就像共享远程分支一样——你可以运行 git push origin {tag_name}
git push origin {tag_name}
# 如果想要一次性推送很多标签，也可以使用带有 --tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。
git push origin --tags
# 删除本地tag, 不会影响远程仓库tag
git tag -d {tag_name}
# 删除远程仓库tag
git push origin --delete {tag_name}
